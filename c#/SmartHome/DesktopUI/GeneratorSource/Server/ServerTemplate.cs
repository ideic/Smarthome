// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DesktopUI.GeneratorSource.Server
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\Smarthome\c#\SmartHome\DesktopUI\GeneratorSource\Server\ServerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class ServerTemplate : ServerTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n#include <Arduino.h>\r\n#include \"Addresses.h\"\r\n#include \"SmartHomeCommunication." +
                    "h\"\r\n\r\n");
            
            #line 11 "C:\Projects\Smarthome\c#\SmartHome\DesktopUI\GeneratorSource\Server\ServerTemplate.tt"
 foreach (Segment segment in Segments) 
{

            
            #line default
            #line hidden
            this.Write("\t#define ");
            
            #line 14 "C:\Projects\Smarthome\c#\SmartHome\DesktopUI\GeneratorSource\Server\ServerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(segment.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 14 "C:\Projects\Smarthome\c#\SmartHome\DesktopUI\GeneratorSource\Server\ServerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(segment.Index));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 15 "C:\Projects\Smarthome\c#\SmartHome\DesktopUI\GeneratorSource\Server\ServerTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\nstruct SegmentState {  \r\n   SegmentState ():_id(false), _isSegmentOn(false){};\r" +
                    "\n    \r\n   SegmentState (byte id, bool isSegmentOn){\r\n       _id = id;\r\n       _i" +
                    "sSegmentOn = isSegmentOn;\r\n    }\r\n    byte _id;\r\n    bool _isSegmentOn;    \r\n  }" +
                    ";\r\n  \r\nstruct Device {\r\n    Device (): _id(0), _address(0), _state(0){}; \r\n    D" +
                    "evice(byte id, byte address, byte state) {\r\n      _id = id;\r\n      _address = ad" +
                    "dress;\r\n      _state = state;\r\n    }\r\n\r\n    byte _id;\r\n    byte _address; \r\n    " +
                    "byte _state;\r\n  };\r\n\r\n#define SwitchNum 8\r\n  \r\nSegmentState _deviceSegments[3];\r" +
                    "\nDevice _switches[SwitchNum];\r\nDevice _relays[10];\r\nSHCommunication _com = SHCom" +
                    "munication();\r\n\r\nvoid setup() {\r\n  Serial.begin(9600, SERIAL_8E1);\r\n  while (!Se" +
                    "rial) {\r\n    ; // wait for serial port to connect. Needed for Leonardo only\r\n  }" +
                    "\r\n  \r\n  _deviceSegments [0] = SegmentState(SegmentN, false);\r\n  _deviceSegments " +
                    "[1] = SegmentState(SegmentE, false);\r\n  _deviceSegments [2] = SegmentState(Segme" +
                    "ntK, false);\r\n  \r\n  _switches[0] = Device(SegmentN, NK1, MSG_DEVICE_OFF);\r\n  _sw" +
                    "itches[1] = Device(SegmentN, NK2, MSG_DEVICE_OFF);\r\n  _switches[2] = Device(Segm" +
                    "entN, NK3, MSG_DEVICE_OFF);\r\n\r\n  _switches[3] = Device(SegmentE, EK1, MSG_DEVICE" +
                    "_OFF);\r\n  _switches[4] = Device(SegmentE, EK2, MSG_DEVICE_OFF);\r\n\r\n  _switches[5" +
                    "] = Device(SegmentK, EK3, MSG_DEVICE_OFF);\r\n  _switches[6] = Device(SegmentK, KU" +
                    "1, MSG_DEVICE_OFF);\r\n  _switches[7] = Device(SegmentK, KK2, MSG_DEVICE_OFF);\r\n  " +
                    "\r\n  _relays[0] = Device(SegmentN, NL1, MSG_DEVICE_OFF);\r\n  _relays[1] = Device(S" +
                    "egmentN, NL2, MSG_DEVICE_OFF);\r\n\r\n  _relays[2] = Device(SegmentE, EL1, MSG_DEVIC" +
                    "E_OFF);\r\n  \r\n  _relays[3] = Device(SegmentK, KUL1, MSG_DEVICE_OFF);\r\n  _relays[4" +
                    "] = Device(SegmentK, KUL2, MSG_DEVICE_OFF);\r\n  _relays[5] = Device(SegmentK, KUL" +
                    "3, MSG_DEVICE_OFF);\r\n  _relays[6] = Device(SegmentK, KUL4, MSG_DEVICE_OFF);\r\n  _" +
                    "relays[7] = Device(SegmentK, KUL5, MSG_DEVICE_OFF);\r\n  _relays[8] = Device(Segme" +
                    "ntK, KUL6, MSG_DEVICE_OFF);\r\n  _relays[9] = Device(SegmentK, KUL7, MSG_DEVICE_OF" +
                    "F);\r\n  \r\n  _com.SetUp();\r\n}\r\n\r\nvoid loop() {\r\n  bool segmentStateChanged = false" +
                    ";\r\n  \r\n  for (int switchIndex = 0; switchIndex<SwitchNum; switchIndex++) {\r\n \r\n " +
                    "   byte deviceState = GetDeviceState (_switches[switchIndex]._address);\r\n    if " +
                    "(deviceState != 0 && deviceState != _switches[switchIndex]._state) {\r\n      _swi" +
                    "tches[switchIndex]._state = deviceState;\r\n      \r\n      int segmentId = _switche" +
                    "s[switchIndex]._id;\r\n      _deviceSegments [segmentId]._isSegmentOn =  !_deviceS" +
                    "egments [segmentId]._isSegmentOn;\r\n      ChangeSegmentRelaysState(segmentId);  \r" +
                    "\n    }\r\n  }\r\n}\r\n\r\nbyte GetDeviceState(byte address) {\r\n  _com.SendMessage(Server" +
                    "Address, address,  CMD_GET);\r\n  \r\n  unsigned long currentTime = millis();\r\n  //o" +
                    "verflow\r\n  if ((currentTime + 100) < currentTime) {\r\n    delay(100);  \r\n    curr" +
                    "entTime = millis();\r\n  }\r\n  \r\n  bool timeOut = false;\r\n \r\n  while (!(_com.WeGotM" +
                    "essage() && _com.Address() == ServerAddress)) {\r\n    if ((currentTime + 100) < m" +
                    "illis()) {\r\n         timeOut = true;\r\n        break;\r\n    } \r\n  }\r\n\r\n  if (!time" +
                    "Out && (_com.From() == address)) {\r\n      return _com.Message();\r\n  }\r\n\r\n  retur" +
                    "n 0;  \r\n  \r\n}\r\n\r\nvoid ChangeSegmentRelaysState(int segmentId) {\r\n  int relayInde" +
                    "x = FindRelay(segmentId);\r\n  for (;_relays[relayIndex]._id == segmentId; relayIn" +
                    "dex++) {\r\n    byte newState = _deviceSegments [segmentId]._isSegmentOn ?  CMD_SE" +
                    "T_ON : CMD_SET_OFF;\r\n    \r\n    _com.SendMessage(ServerAddress, _relays[relayInde" +
                    "x]._address, newState);\r\n    delay(50);\r\n    if (GetDeviceState(_relays[relayInd" +
                    "ex]._address) != newState == CMD_SET_ON ?  MSG_DEVICE_ON : MSG_DEVICE_OFF) {\r\n  " +
                    "    _com.SendMessage(ServerAddress, _relays[relayIndex]._address, newState);\r\n  " +
                    "  }\r\n  }\r\n}\r\n\r\nint FindRelay (int segmentId) {\r\n  int index = 0;\r\n  while (_rela" +
                    "ys[index]._id != segmentId) {\r\n    index++;  \r\n  }\r\n  \r\n  return index;\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class ServerTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
