<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

#include <Arduino.h>
#include "Addresses.h"
#include "SmartHomeCommunication.h"

<# foreach (Segment segment in SegmentManager.Segments) 
{
#>
#define <#=segment.Name#> <#=segment.Index#>
<#}#>

struct SegmentState {  
   SegmentState ():_id(false), _isSegmentOn(false){};
    
   SegmentState (byte id, bool isSegmentOn){
       _id = id;
       _isSegmentOn = isSegmentOn;
    }
    byte _id;
    bool _isSegmentOn;    
  };
  
struct Device {
    Device (): _id(0), _address(0), _state(0){}; 
    Device(byte id, byte address, byte state) {
      _id = id;
      _address = address;
      _state = state;
    }

    byte _id;
    byte _address; 
    byte _state;
  };

#define SwitchNum <#=SegmentManager.SwitchNumbers#>
  
SegmentState _deviceSegments[<#=SegmentManager.Segments.Count#>];
Device _switches[SwitchNum];
Device _relays[<#=SegmentManager.LightNumbers#>];
SHCommunication _com = SHCommunication();

void setup() {
  Serial.begin(9600, SERIAL_8E1);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  <#
	var segmentIdx = 0;
	var switchIdx = 0;
	var lightIdx = 0;
	foreach (var segmentItem  in SegmentManager.Segments)
	{#>
	_deviceSegments [<#=segmentIdx#>] = SegmentState(<#=segmentItem.Name#>, false);
		
		<#foreach (var switchItem in segmentItem.Switches)
		{#>
	_switches[<#=switchIdx#>] = Device(<#=segmentItem.Name#>, <#=switchItem.Name#>, MSG_DEVICE_OFF);
		<#	switchIdx++;
		}#>

		<#foreach (var lightItem in segmentItem.Lights)
		{#>
	_relays[<#=lightIdx#>] = Device(<#=segmentItem.Name#>, <#=lightItem.Name#>, MSG_DEVICE_OFF);
		<#	lightIdx++;
		}
		segmentIdx++;
	}#>
  _com.SetUp();
}

void loop() {
  bool segmentStateChanged = false;
  
  for (int switchIndex = 0; switchIndex<SwitchNum; switchIndex++) {
 
    byte deviceState = GetDeviceState (_switches[switchIndex]._address);
    if (deviceState != 0 && deviceState != _switches[switchIndex]._state) {
      _switches[switchIndex]._state = deviceState;
      
      int segmentId = _switches[switchIndex]._id;
      _deviceSegments [segmentId]._isSegmentOn =  !_deviceSegments [segmentId]._isSegmentOn;
      ChangeSegmentRelaysState(segmentId);  
    }
  }
}

byte GetDeviceState(byte address) {
  _com.SendMessage(ServerAddress, address,  CMD_GET);
  
  unsigned long currentTime = millis();
  //overflow
  if ((currentTime + 100) < currentTime) {
    delay(100);  
    currentTime = millis();
  }
  
  bool timeOut = false;
 
  while (!(_com.WeGotMessage() && _com.Address() == ServerAddress)) {
    if ((currentTime + 100) < millis()) {
         timeOut = true;
        break;
    } 
  }

  if (!timeOut && (_com.From() == address)) {
      return _com.Message();
  }

  return 0;  
  
}

void ChangeSegmentRelaysState(int segmentId) {
  int relayIndex = FindRelay(segmentId);
  for (;_relays[relayIndex]._id == segmentId; relayIndex++) {
    byte newState = _deviceSegments [segmentId]._isSegmentOn ?  CMD_SET_ON : CMD_SET_OFF;
    
    _com.SendMessage(ServerAddress, _relays[relayIndex]._address, newState);
    delay(50);
    if (GetDeviceState(_relays[relayIndex]._address) != newState == CMD_SET_ON ?  MSG_DEVICE_ON : MSG_DEVICE_OFF) {
      _com.SendMessage(ServerAddress, _relays[relayIndex]._address, newState);
    }
  }
}

int FindRelay (int segmentId) {
  int index = 0;
  while (_relays[index]._id != segmentId) {
    index++;  
  }
  
  return index;
}
